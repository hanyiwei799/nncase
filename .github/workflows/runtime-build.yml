name: runtime-build

on: [push, pull_request]

jobs:
  build-native:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        config:
          - {name: x86_64-macos, os: macos-latest, cmakeArgs: '', buildType: Release}
          - {name: x86_64-linux, os: ubuntu-latest, cmakeArgs: '', buildType: Release}
          - {name: x86_64-windows, os: windows-latest, arch: x64, cmakeArgs: -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl, buildType: Release}

    steps:
    - uses: actions/checkout@v3
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Set up build environment (Windows, Visual Studio)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{matrix.config.arch}}
      if: runner.os == 'Windows'

    - name: Set up build environment (Macos)
      run: |
        brew install sunnycase/core/libomp@11.1.0
      if: runner.os == 'Macos'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: Install Conan
      run: pip install conan==1.58

    - name: Configure Conan (Linux)
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV
      if: runner.os == 'Linux'

    - name: Configure CMake
      shell: bash
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{matrix.config.buildType}} ${{matrix.config.cmakeArgs}} -DBUILDING_RUNTIME=TRUE -DBUILD_PYTHON_BINDING=OFF -DPython3_ROOT_DIR=${pythonLocation}

    - name: Build & Install
      run: |
        cmake --build build --config ${{matrix.config.buildType}}
        cmake --install build --prefix install

    #- name: Benchmark
    #  run: |
    #    ${{github.workspace}}/install/bin/benchnncase > benchnncase.log
    #    cat benchnncase.log

    - name: Upload nncaseruntime Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: nncaseruntime-${{matrix.config.name}}
        path: ${{github.workspace}}/install
        if-no-files-found: error

    #- name: Upload nncaseruntime Benchmark
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: nncaseruntime-benchmark-${{matrix.config.name}}
    #    path: ${{github.workspace}}/benchnncase.log
    #    if-no-files-found: error

  #build-cross:
  #  name: ${{matrix.config.name}}
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      config:
  #        - {name: riscv64-none-k210, shell: bash, toolchain: k210, cmakeArgs: -DK210_SDK_DIR=$GITHUB_WORKSPACE/kendryte-standalone-sdk-develop, buildType: Release}

  #  steps:
  #  - uses: actions/checkout@v3
  #  - uses: seanmiddleditch/gha-setup-ninja@master

  #  - name: Setup Python
  #    uses: actions/setup-python@v4
  #    with:
  #      python-version: 3.7

  #  - name: Install K210 Baremetal SDK
  #    shell: bash
  #    run: |
  #      wget https://github.com/kendryte/kendryte-gnu-toolchain/releases/download/v8.2.0-20190409/kendryte-toolchain-ubuntu-amd64-8.2.0-20190409.tar.xz -O $GITHUB_WORKSPACE/kendryte-toolchain.tar.xz
  #      sudo tar xf $GITHUB_WORKSPACE/kendryte-toolchain.tar.xz -C $GITHUB_WORKSPACE
  #      wget https://github.com/kendryte/kendryte-standalone-sdk/archive/refs/heads/develop.tar.gz -O $GITHUB_WORKSPACE/k210-sdk.tar.gz
  #      sudo tar xf $GITHUB_WORKSPACE/k210-sdk.tar.gz -C $GITHUB_WORKSPACE
  #      echo "RISCV_ROOT_PATH=$GITHUB_WORKSPACE/kendryte-toolchain" >> $GITHUB_ENV
  #    if: matrix.config.name == 'riscv64-none-k210'

  #  - name: Install Conan
  #    run: pip install conan==1.58

  #  - name: Configure Conan (Linux)
  #    run: |
  #      conan profile new default --detect
  #      conan profile update settings.compiler.libcxx=libstdc++11 default
  #  - name: Build
  #    run: |
  #      cmake -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/${{matrix.config.toolchain}}.toolchain.cmake -DCMAKE_BUILD_TYPE=${{matrix.config.buildType}} ${{matrix.config.cmakeArgs}} -DBUILDING_RUNTIME=TRUE -DBUILD_PYTHON_BINDING=OFF -DPython3_ROOT_DIR=${pythonLocation}
  #      cmake --build build --config ${{matrix.config.buildType}}
  #  - name: Install
  #    run: cmake --install build --prefix install

  #  - name: Upload nncaseruntime Build Artifact
  #    uses: actions/upload-artifact@v3
  #    with:
  #      name: nncaseruntime-${{matrix.config.name}}
  #      path: ${{github.workspace}}/install
  #      if-no-files-found: error

  test-native:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      matrix:
        config:
          - {name: x86_64-linux, os: ubuntu-latest, cmakeArgs: '', buildType: Release}

    steps:
    - uses: actions/checkout@v3
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: Install Conan
      run: pip install conan==1.58

    - name: Configure Conan (Linux)
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV
      if: runner.os == 'Linux'

    - name: Build
      shell: bash
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{matrix.config.buildType}} ${{matrix.config.cmakeArgs}} -DBUILDING_RUNTIME=TRUE -DBUILD_PYTHON_BINDING=OFF -DPython3_ROOT_DIR=${pythonLocation} -DBUILD_TESTING=on
        cmake --build build --config ${{matrix.config.buildType}}

    - name: Test
      run: |
        cd build
        ctest --test-dir tests/kernels --output-on-failure -j4


  test-cross:
   name: ${{matrix.config.name}}
   runs-on: ubuntu-latest
   strategy:
     matrix:
       config:
         - {name: riscv64-unknown-linux_gnu, shell: bash, toolchain: riscv64-unknown-linux, cmakeArgs: '', buildType: Release}

   steps:
   - uses: actions/checkout@v3
   - uses: seanmiddleditch/gha-setup-ninja@master

   - name: Setup tmate session
     uses: mxschmitt/action-tmate@v3

   - name: Setup Python
     uses: actions/setup-python@v4
     with:
       python-version: 3.7

   - name: Setup
     shell: bash
     run: |
       wget https://dav.sunnycase.moe/d/ci/riscv64-unknown-linux_gnu_12.0.1.tgz -O $GITHUB_WORKSPACE/riscv64-unknown-linux_gnu_12.0.1.tgz
       sudo tar xf $GITHUB_WORKSPACE/riscv64-unknown-linux_gnu_12.0.1.tgz -C $GITHUB_WORKSPACE
       echo "RISCV_ROOT_PATH=$GITHUB_WORKSPACE/riscv64-unknown-linux_gnu_12.0.1" >> $GITHUB_ENV

       wget https://dav.sunnycase.moe/d/ci/qemu-riscv64.tgz -O $GITHUB_WORKSPACE/qemu-riscv64.tgz
       sudo tar xf $GITHUB_WORKSPACE/qemu-riscv64.tgz  -C $GITHUB_WORKSPACE
       echo "PATH=$GITHUB_WORKSPACE:$PATH" >> $GITHUB_ENV
     if: matrix.config.name == 'riscv64-unknown-linux_gnu'

   - name: Install Conan
     run: pip install conan==1.58

   - name: Configure Conan (Linux)
     run: |
       conan profile new default --detect
       conan profile update settings.compiler.libcxx=libstdc++11 default
       ls -l /home/runner/.conan/
       find /home/runner/.conan/ -name settings.yml
       sed -i 's/xtensalx7]/xtensalx7, riscv32, riscv64]/g' /home/runner/.conan/settings.yml
       sed -i 's/"12", "12.1", "12.2"]/"12", "12.0", "12.1", "12.2"]/g' /home/runner/.conan/settings.yml

   - name: Build
     run: |
       cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{matrix.config.buildType}} ${{matrix.config.cmakeArgs}} -DBUILDING_RUNTIME=TRUE -DBUILD_PYTHON_BINDING=OFF -DPython3_ROOT_DIR=${pythonLocation} -DBUILD_TESTING=on -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/${{matrix.config.toolchain}}.toolchain.cmake
       cmake --build build --config ${{matrix.config.buildType}}

   - name: Test
     run: |
       TESTS_EXECUTABLE_LOADER=qemu-riscv64
       TESTS_EXECUTABLE_LOADER_ARGUMENTS="-cpu;rv64,v=true,Zfh=true,vlen=128,elen=64,vext_spec=v1.0;-L;$GITHUB_WORKSPACE/riscv64-unknown-linux_gnu_12.0.1/sysroot"
       cd build
       ctest --test-dir tests/kernels --output-on-failure -j4
